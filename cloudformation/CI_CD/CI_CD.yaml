Outputs:
  RepositoryURL:
    Description: The docker repository URL
    Value: !Join
      - ''
      - - !Ref 'AWS::AccountId'
        - .dkr.ecr.
        - !Ref 'AWS::Region'
        - .amazonaws.com/
        - !Ref 'Repository'
Parameters:
  GitHubUser:
     Type: String
  GitHubAccessToken:
     Type: String
  GitHubRepo:
     Type: String
  ClusterName: 
     Type: String
  ServiceName: 
     Type: String
Resources:
  BuildProject:
    DependsOn: CodeBuildServiceRolePolicy
    Properties:
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        EnvironmentVariables:
          - Name: AWS_ACCOUNT_ID
            Value: !Ref 'AWS::AccountId'
          - Name: IMAGE_REPO_NAME
            Value: !Ref 'Repository'
          - Name: IMAGE_TAG
            Value: latest
        Image: aws/codebuild/amazonlinux2-x86_64-standard:1.0
        PrivilegedMode: 'true'
        Type: LINUX_CONTAINER
      Name: demo-build
      ServiceRole: !Ref 'CodeBuildServiceRole'
      Source:
        BuildSpec: buildspec-docker.yml
        Type: CODEPIPELINE
      Artifacts:
        Type: CODEPIPELINE

    Type: AWS::CodeBuild::Project
  CodeBuildServiceRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
    Type: AWS::IAM::Role
  CodeBuildServiceRolePolicy:
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource:
              - '*'
            Sid: CloudWatchLogsPolicy
          - Action:
              - s3:List*
              - s3:Get*
              - s3:Put*
            Effect: Allow
            Resource:
              - '*'
            Sid: S3ObjectPolicy
          - Action:
              - ecr:GetAuthorizationToken
            Effect: Allow
            Resource:
              - '*'
          - Action:
              - ecr:*
            Effect: Allow
            Resource:
              - !Join
                - ''
                - - 'arn:aws:ecr:'
                  - !Ref 'AWS::Region'
                  - ':'
                  - !Ref 'AWS::AccountId'
                  - :repository/
                  - !Ref 'Repository'
        Version: '2012-10-17'
      PolicyName: CodeBuildServiceRolePolicy
      Roles:
        - !Ref 'CodeBuildServiceRole'
    Type: AWS::IAM::Policy
  CodePipelineServicePolicy:
    Properties:
      PolicyDocument:
        Statement:
          - Action: iam:PassRole
            Effect: Allow
            Resource: '*'
          - Action:
              - ecs:DescribeTaskDefinition
              - ecs:RegisterTaskDefinition
              - ecs:DescribeServices
              - ecs:UpdateService
              - ecs:DescribeTasks
              - ecs:ListTasks
            Effect: Allow
            Resource: '*'
          - Action:
              - codebuild:StartBuild
              - codebuild:BatchGetBuilds
            Effect: Allow
            Resource:
              - !Join
                - ''
                - - 'arn:aws:codebuild:'
                  - !Ref 'AWS::Region'
                  - ':'
                  - !Ref 'AWS::AccountId'
                  - :project/
                  - !Ref 'BuildProject'
          - Action:
              - s3:List*
              - s3:Put*
              - s3:Get*
            Effect: Allow
            Resource:
              - '*'
          - Action:
              - cloudformation:*
            Effect: Allow
            Resource:
              - '*'
        Version: '2012-10-17'
      PolicyName: CodePipelineServicePolicy
      Roles:
        - !Ref 'CodePipelineServiceRole'
    Type: AWS::IAM::Policy
  CodePipelineServiceRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
    Type: AWS::IAM::Role

  DemoArtifactBucket:
    Type: AWS::S3::Bucket
  
  Repository:
    Properties:
      RepositoryName: demo
    Type: AWS::ECR::Repository

  Pipeline:
   Type: AWS::CodePipeline::Pipeline
   Properties:
    RoleArn: !GetAtt CodePipelineServiceRole.Arn
    Stages:
      -
        Name: Source
        Actions:
           -
             Name: SourceAction
             ActionTypeId:
               Version: '1'
               Owner: ThirdParty
               Category: Source
               Provider: GitHub
             OutputArtifacts:
               - Name: SourceArtifact
             RunOrder: 1
             Configuration:
               Owner: !Ref GitHubUser
               Repo: !Ref GitHubRepo
               PollForSourceChanges: 'False'
               Branch: master
               OAuthToken: !Ref GitHubAccessToken
      -
        Name: Build
        Actions:
          -
            Name: BuildingImage
            ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: '1'
            RunOrder: 1
            Configuration:
              ProjectName: !Ref BuildProject
              PrimarySource: SourceArtifact
            InputArtifacts:
               - Name: SourceArtifact
            OutputArtifacts:
              - Name: TaskDefition
      -
        Name: Deploy
        Actions:
          - 
            Name: DeployECS
            ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: ECS
                Version: '1'
            RunOrder: 1
            Configuration:
              ClusterName: !Ref ClusterName
              ServiceName: !Ref ServiceName
              FileName: images.json
            InputArtifacts:
              - Name: TaskDefition
    ArtifactStore:
      Type: S3
      Location:
        Ref: DemoArtifactBucket

  AppPipelineWebhook:
    Type: AWS::CodePipeline::Webhook
    Properties:
      Authentication: GITHUB_HMAC
      AuthenticationConfiguration:
        SecretToken: !Ref GitHubAccessToken
      Filters:
        -
          JsonPath: "$.ref"
          MatchEquals: refs/heads/{Branch}
      TargetPipeline: !Ref Pipeline
      TargetAction: SourceAction
      Name: PipelineWebhook
      TargetPipelineVersion: !GetAtt Pipeline.Version
      RegisterWithThirdParty: true